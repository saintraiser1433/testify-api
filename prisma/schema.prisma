// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//local provider

model User {
  id           String        @id @default(cuid())
  first_name   String        @db.VarChar(100)
  last_name    String        @db.VarChar(100)
  middle_name  String        @db.VarChar(100)
  email        String?       @db.VarChar(100)
  username     String        @db.VarChar(100)
  password     String        @db.VarChar(100)
  accessToken  String?
  refreshToken String?
  role         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Answers      Answers[]
  ExamAttempt  ExamAttempt[]
}

//suggested prisma authentication model

model Course {
  course_id   Int           @id @default(autoincrement())
  description String        @db.VarChar(100)
  score       Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  AssignDeans AssignDeans[]
}

model Exam {
  exam_id     Int           @id @default(autoincrement())
  exam_title  String        @db.VarChar(150)
  description String        @db.VarChar(255)
  time_limit  Int
  status      Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Question    Question[]
  Answers     Answers[]
  ExamAttempt ExamAttempt[]
}

model Question {
  question_id Int       @id @default(autoincrement())
  question    String
  examList    Exam      @relation(fields: [exam_id], references: [exam_id], onDelete: Cascade, onUpdate: Cascade)
  exam_id     Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Choices     Choices[]
  Answers     Answers[]
}

model Choices {
  choices_id   Int       @id @default(autoincrement())
  questionList Question  @relation(fields: [question_id], references: [question_id], onDelete: Cascade, onUpdate: Cascade)
  question_id  Int
  description  String
  status       Boolean
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  Answers      Answers[]
}

model Answers {
  examineeList User     @relation(fields: [examinee_id], references: [id])
  examList     Exam     @relation(fields: [exam_id], references: [exam_id])
  questionList Question @relation(fields: [question_id], references: [question_id])
  choicesList  Choices  @relation(fields: [choices_id], references: [choices_id])
  examinee_id  String
  exam_id      Int
  question_id  Int
  choices_id   Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@id([examinee_id, exam_id, question_id, choices_id])
}

model ExamAttempt {
  examineeList User     @relation(fields: [examinee_id], references: [id])
  examinee_id  String
  examList     Exam     @relation(fields: [exam_id], references: [exam_id])
  exam_id      Int
  createdAt    DateTime @default(now())

  @@id([examinee_id, exam_id])
}

model Department {
  department_id   Int      @id @default(autoincrement())
  department_name String
  status          Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Deans           Deans?
}

model Deans {
  deans_id      Int           @id @default(autoincrement())
  first_name    String        @db.VarChar(100)
  last_name     String        @db.VarChar(100)
  middle_name   String        @db.VarChar(100)
  username      String        @db.VarChar(100)
  password      String        @db.VarChar(100)
  status        Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  department    Department    @relation(fields: [department_id], references: [department_id])
  department_id Int           @unique
  AssignDeans   AssignDeans[]
}

model AssignDeans {
  deans     Deans    @relation(fields: [deans_id], references: [deans_id])
  deans_id  Int
  course    Course   @relation(fields: [course_id], references: [course_id])
  course_id Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([deans_id, course_id])
}
